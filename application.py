from flask import Flask, request, jsonify
import requests
import json
import re
from datetime import datetime, timedelta
import os
import smtplib
import ssl
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart

# Importaciones para Google Calendar API
from google.oauth2 import service_account
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError

# Importaciones para iCalendar (.ics)
from icalendar import Calendar, Event as IcsEvent
import tempfile
import os

# Crear la aplicaci√≥n Flask (cambiar 'app' por 'application' para Passenger)
application = Flask(__name__)

# === CONFIGURACI√ìN ===
META_ACCESS_TOKEN = os.environ.get('META_ACCESS_TOKEN') or 'temporal_token_placeholder'
META_PHONE_NUMBER_ID = os.environ.get('META_PHONE_NUMBER_ID') or '123456789012345'
META_VERIFY_TOKEN = os.environ.get('META_VERIFY_TOKEN') or 'milkiin_verify_token_2024'

# Variables para Google Calendar
GOOGLE_CALENDAR_CREDENTIALS_JSON = os.environ.get('GOOGLE_CALENDAR_CREDENTIALS')
GOOGLE_CALENDAR_ID = os.environ.get('GOOGLE_CALENDAR_ID')
SCOPES = ['https://www.googleapis.com/auth/calendar.events']  # Sin espacios extra

# === CONFIGURACI√ìN DE CORREO ELECTR√ìNICO ===
EMAIL_ADDRESS = os.environ.get('EMAIL_ADDRESS')
EMAIL_PASSWORD = os.environ.get('EMAIL_PASSWORD')
SMTP_SERVER = 'smtp.gmail.com'
SMTP_PORT = 465

# === AUTENTICACI√ìN Y SERVICIO DE CALENDAR ===
def get_calendar_service():
    try:
        info = json.loads(GOOGLE_CALENDAR_CREDENTIALS_JSON)
        credentials = service_account.Credentials.from_service_account_info(
            info,
            scopes=SCOPES
        )
        service = build('calendar', 'v3', credentials=credentials)
        return service
    except (json.JSONDecodeError, HttpError) as e:
        print(f"‚ùå Error al inicializar el servicio de Google Calendar: {e}")
        return None

# === ESTADO DE CONVERSACI√ìN ===
user_state = {}
user_data_storage = {}

# === MENSAJES DEL BOT ===
WELCOME_MESSAGE = {
    "type": "text",
    "text": {
        "body": "üëã ¬°Hola! Bienvenido(a) a Milkiin, donde cada paso en tu camino a la maternidad cuenta. ‚ú® Soy MilkiBot, tu asistente virtual, y estoy aqu√≠ para ayudarte con todo lo que necesites.\n\n¬øEn qu√© te puedo apoyar hoy?\n\n1Ô∏è‚É£ Paciente de primera vez\n2Ô∏è‚É£ Paciente subsecuente\n3Ô∏è‚É£ Atenci√≥n al cliente\n4Ô∏è‚É£ Facturaci√≥n\n5Ô∏è‚É£ Env√≠o de Resultados\n6Ô∏è‚É£ Dudas"
    }
}

SERVICIOS_PRIMERA_VEZ = {
    "type": "text",
    "text": {
        "body": "Selecciona el servicio de primera vez:\n1Ô∏è‚É£ Fertilidad\n2Ô∏è‚É£ S√≠ndrome de Ovario Poliqu√≠stico\n3Ô∏è‚É£ Chequeo Anual\n4Ô∏è‚É£ Embarazo\n5Ô∏è‚É£ Otros"
    }
}

SERVICIOS_SUBSECUENTE = {
    "type": "text",
    "text": {
        "body": "Selecciona el servicio subsecuente:\n1Ô∏è‚É£ Fertilidad\n2Ô∏è‚É£ S√≠ndrome de Ovario Poliqu√≠stico\n3Ô∏è‚É£ Chequeo Anual\n4Ô∏è‚É£ Embarazo\n5Ô∏è‚É£ Revisi√≥n de estudios\n6Ô∏è‚É£ Seguimiento folicular\n7Ô∏è‚É£ Otros"
    }
}

OTROS_OPCIONES = {
    "type": "text",
    "text": {
        "body": "Selecciona una opci√≥n:\n1Ô∏è‚É£ Espermabiopsia directa\n2Ô∏è‚É£ Ginecolog√≠a Pedi√°trica y Adolescentes\n3Ô∏è‚É£ Hablar con Am√©rica"
    }
}

ESPECIALISTAS = {
    "type": "text",
    "text": {
        "body": "Selecciona tu especialista:\n1Ô∏è‚É£ Dra. M√≥nica Olavarr√≠a\n2Ô∏è‚É£ Dra. Graciela Guadarrama\n3Ô∏è‚É£ Dra. Cinthia Ruiz\n4Ô∏è‚É£ Dra. Gisela Cuevas\n5Ô∏è‚É£ Dra. Gabriela S√°nchez"
    }
}

HORARIOS_PRIMERA_VEZ = {
    "type": "text",
    "text": {
        "body": "Lunes: 9:00 ‚Äì 19:00 hrs (comida 13:00‚Äì14:00)\nMartes: 9:00‚Äì11:00 hrs\nMi√©rcoles: 15:00‚Äì20:00 hrs\nJueves: 9:00‚Äì12:00 / 15:00‚Äì18:00 hrs\nViernes: 9:00‚Äì15:00 hrs\nS√°bado: 10:00‚Äì11:30 hrs (solo fertilidad y SOP)"
    }
}

HORARIOS_SUBSECUENTE = {
    "type": "text",
    "text": {
        "body": "Lunes: 9:00 ‚Äì 19:00 hrs (comida 13:00‚Äì14:00)\nMartes: 9:00‚Äì11:00 hrs\nMi√©rcoles: 15:00‚Äì20:00 hrs\nJueves: 9:00‚Äì12:00 / 15:00‚Äì18:00 hrs\nViernes: 9:00‚Äì15:00 hrs\nS√°bado: 8:00‚Äì15:00 hrs (solo fertilidad y SOP)"
    }
}

COSTOS = {
    "type": "text",
    "text": {
        "body": "üí∞ Nuestros costos:\n\n‚Ä¢ PAQUETE CHECK UP: $1,800 pesos (incluye papanicolaou, USG , revisi√≥n de mamas, colposcopia y consulta)\n‚Ä¢ CONSULTA DE FERTILIDAD: $1,500 pesos. (incluye ultrasonido)\n‚Ä¢ CONSULTA PRENATAL: $1,500 pesos. (incluye ultrasonido)\n‚Ä¢ ESPERMABIOTOSCOPIA: $1,500 pesos\n‚Ä¢ ESPERMABIOTOSCOPIA CON FRAGMENTACI√ìN: $4,500 pesos"
    }
}

CONFIRMACION = {
    "type": "text",
    "text": {
        "body": "‚úÖ ¬°Gracias por agendar tu cita con Milkiin!\n\nüìç Te esperamos en: Insurgentes Sur 1160, 6¬∫ piso, Colonia Del Valle. \nüó∫Ô∏è [Ubicaci√≥n en Google Maps](https://maps.app.goo.gl/VfWbVgwHLQrZPNrNA)\n\nüí≥ Aceptamos pagos con tarjeta (incluyendo AMEX) y en efectivo.\n\n‚è∞ En caso de cancelaci√≥n, es necesario avisar con m√≠nimo 72 horas de anticipaci√≥n para poder realizar el reembolso del anticipo y reprogramar tu cita. Si no se cumple con este plazo, lamentablemente no podremos hacer el reembolso.\n\nAgradecemos tu comprensi√≥n y tu confianza. Estamos para acompa√±arte con profesionalismo y cari√±o en cada paso ‚ù§Ô∏è. Si tienes alguna duda o necesitas apoyo adicional, no dudes en escribirnos."
    }
}

FINAL_MESSAGE = {
    "type": "text",
    "text": {
        "body": "Conversaci√≥n finalizada. Para iniciar un nuevo proceso, por favor, env√≠a un mensaje. ¬°Estamos para ayudarte! üòä"
    }
}

# MAPEOS
ESPECIALISTAS_NOMBRES = {
    "1": "Dra. M√≥nica Olavarr√≠a",
    "2": "Dra. Graciela Guadarrama",
    "3": "Dra. Cinthia Ruiz",
    "4": "Dra. Gisela Cuevas",
    "5": "Dra. Gabriela S√°nchez"
}

SERVICIOS_NOMBRES = {
    "1": "Fertilidad",
    "2": "S√≠ndrome de Ovario Poliqu√≠stico",
    "3": "Chequeo Anual",
    "4": "Embarazo",
    "5": "Otros"
}

SERVICIOS_SUB_NOMBRES = {
    "1": "Fertilidad",
    "2": "S√≠ndrome de Ovario Poliqu√≠stico",
    "3": "Chequeo Anual",
    "4": "Embarazo",
    "5": "Revisi√≥n de estudios",
    "6": "Seguimiento folicular",
    "7": "Otros"
}

DURACIONES_PRIMERA_VEZ = {
    "1": 90,
    "2": 60,
    "3": 60,
    "4": 60,
    "5": 30
}

DURACIONES_SUBSECUENTE = {
    "1": 45,
    "2": 45,
    "3": 45,
    "4": 45,
    "5": 30,
    "6": 30,
    "7": 30
}

# === FUNCIONES PARA WHATSAPP META API ===
def send_whatsapp_message(phone_number, message_data):
    try:
        url = f"https://graph.facebook.com/v22.0/{META_PHONE_NUMBER_ID}/messages"
        headers = {
            'Authorization': f'Bearer {META_ACCESS_TOKEN}',
            'Content-Type': 'application/json'
        }
        formatted_phone = format_phone_number(phone_number)
        payload = {
            "messaging_product": "whatsapp",
            "to": formatted_phone,
            "type": message_data["type"]
        }
        if message_data["type"] == "text":
            payload["text"] = message_data["text"]
        elif message_data["type"] == "template":
            payload["template"] = message_data["template"]
        response = requests.post(url, headers=headers, json=payload)
        if response.status_code == 200:
            print(f"‚úÖ Mensaje enviado a {phone_number}")
            return response.json()
        else:
            print(f"‚ùå Error enviando mensaje: {response.status_code} - {response.text}")
            return None
    except Exception as e:
        print(f"‚ùå Error en send_whatsapp_message: {e}")
        return None

def format_phone_number(phone):
    clean_phone = re.sub(r'\D', '', phone)
    if clean_phone.startswith('52') and len(clean_phone) == 12:
        return clean_phone
    elif clean_phone.startswith('1') and len(clean_phone) == 11:
        return '52' + clean_phone[1:]
    elif len(clean_phone) == 10:
        return '52' + clean_phone
    return clean_phone

def extract_user_data(message_body):
    data = {}
    lines = message_body.split('\n')
    for line in lines:
        if 'nombre' in line.lower() or 'paciente' in line.lower():
            data['nombre'] = line.split(':', 1)[1].strip() if ':' in line else line
        elif re.search(r'\d{10,}', line):
            phone_match = re.search(r'\d{10,}', line)
            if phone_match:
                data['telefono'] = phone_match.group(0)
    return data

# === GENERAR ARCHIVO .ICS ===
def generar_archivo_ics(nombre_paciente, servicio, especialista, fecha_hora, duracion_minutos):
    cal = Calendar()
    event = IcsEvent()
    event.name = f"Cita en Milkiin - {servicio}"
    event.begin = fecha_hora
    event.end = fecha_hora + timedelta(minutes=duracion_minutos)
    event.location = "Insurgentes Sur 1160, 6¬∫ piso, Colonia Del Valle, Ciudad de M√©xico"
    event.description = f"""
Cita agendada con √©xito en Milkiin ‚ù§Ô∏è

Servicio: {servicio}
Especialista: {especialista}
Paciente: {nombre_paciente}

üìç Direcci√≥n: Insurgentes Sur 1160, 6¬∫ piso, Colonia Del Valle
üó∫Ô∏è [Google Maps](https://maps.app.goo.gl/VfWbVgwHLQrZPNrNA)

üí≥ Aceptamos tarjeta (incluyendo AMEX) y efectivo.
‚è∞ Recordatorio: Si necesitas cancelar, av√≠sanos con 72 horas de anticipaci√≥n.

¬°Te esperamos con cari√±o!
    """.strip()
    cal.events.add(event)
    temp_file = tempfile.NamedTemporaryFile(delete=False, suffix=".ics")
    temp_file.write(cal.serialize().encode("utf-8"))
    temp_file.close()
    return temp_file.name

# === ENVIAR .ICS POR WHATSAPP ===
def send_whatsapp_document(phone_number, file_path, caption="üìÖ Tu cita ha sido agendada. Adjunto est√° el archivo para agregarla a tu calendario."):
    try:
        formatted_phone = format_phone_number(phone_number)
        media_upload_url = f"https://graph.facebook.com/v22.0/{META_PHONE_NUMBER_ID}/media"
        headers = {'Authorization': f'Bearer {META_ACCESS_TOKEN}'}
        with open(file_path, 'rb') as f:
            files = {
                'file': (os.path.basename(file_path), f, 'text/calendar'),
                'type': 'document',
                'messaging_product': 'whatsapp'
            }
            data = {'messaging_product': 'whatsapp', 'type': 'document'}
            response_upload = requests.post(media_upload_url, headers=headers, files=files, data=data)
        if response_upload.status_code != 200:
            print(f"‚ùå Error al subir archivo .ics: {response_upload.text}")
            return False
        media_id = response_upload.json().get('id')
        if not media_id:
            print("‚ùå No se recibi√≥ media_id despu√©s de subir el archivo.")
            return False
        send_url = f"https://graph.facebook.com/v22.0/{META_PHONE_NUMBER_ID}/messages"
        payload = {
            "messaging_product": "whatsapp",
            "to": formatted_phone,
            "type": "document",
            "document": {
                "id": media_id,
                "filename": "cita_milkiin.ics",
                "caption": caption
            }
        }
        send_response = requests.post(send_url, headers=headers, json=payload)
        if send_response.status_code == 200:
            print("‚úÖ Archivo .ics enviado por WhatsApp.")
            return True
        else:
            print(f"‚ùå Error al enviar documento por WhatsApp: {send_response.text}")
            return False
    except Exception as e:
        print(f"‚ùå Error en send_whatsapp_document: {e}")
        return False

# === GOOGLE CALENDAR ===
def crear_evento_google_calendar(resumen, inicio, duracion_minutos, descripcion):
    try:
        service = get_calendar_service()
        if not service:
            return None
        fin = inicio + timedelta(minutes=duracion_minutos)
        event = {
            'summary': resumen,
            'description': descripcion,
            'start': {
                'dateTime': inicio.isoformat(),
                'timeZone': 'America/Mexico_City',
            },
            'end': {
                'dateTime': fin.isoformat(),
                'timeZone': 'America/Mexico_City',
            },
        }
        event = service.events().insert(calendarId=GOOGLE_CALENDAR_ID, body=event).execute()
        print(f"‚úÖ Evento de Google Calendar creado: {event.get('htmlLink')}")
        return event.get('htmlLink')
    except HttpError as error:
        print(f"‚ùå Error al crear evento de Google Calendar: {error}")
        return None
    except Exception as e:
        print(f"‚ùå Error desconocido: {e}")
        return None

# === ENV√çO DE CORREO ===
def send_appointment_email(recipient_email, patient_name, doctor_name, appointment_date, appointment_time):
    if not all([EMAIL_ADDRESS, EMAIL_PASSWORD, recipient_email]):
        print("‚ùå Error: Faltan credenciales de correo o correo del destinatario.")
        return False
    message = MIMEMultipart("alternative")
    message["Subject"] = "Confirmaci√≥n de Cita - Milkiin"
    message["From"] = EMAIL_ADDRESS
    message["To"] = recipient_email
    text = f"""
    Hola {patient_name},

    Tu cita con la Dra. {doctor_name} ha sido agendada con √©xito.

    Detalles de la cita:
    Fecha: {appointment_date}
    Hora: {appointment_time}

    Te esperamos en nuestras instalaciones. Si tienes alguna duda, responde a este correo.

    Saludos cordiales,
    El equipo de Milkiin
    """
    html = f"""
    <html>
      <body>
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: auto; padding: 20px; border: 1px solid #ddd; border-radius: 10px;">
          <h2 style="color: #4CAF50;">‚úÖ Cita Confirmada</h2>
          <p>Hola <strong>{patient_name}</strong>,</p>
          <p>Tu cita con la <strong>Dra. {doctor_name}</strong> ha sido agendada con √©xito.</p>
          <p>Aqu√≠ est√°n los detalles de tu cita:</p>
          <ul>
            <li><strong>Fecha:</strong> {appointment_date}</li>
            <li><strong>Hora:</strong> {appointment_time}</li>
          </ul>
          <p>¬°Esperamos verte pronto!</p>
          <p>Si necesitas reagendar o tienes alguna pregunta, por favor cont√°ctanos.</p>
          <p style="margin-top: 30px;">
            Saludos cordiales,<br>
            El equipo de Milkiin
          </p>
          <hr style="border: 0; border-top: 1px solid #eee; margin: 20px 0;">
          <p style="font-size: 12px; color: #999;">Este es un mensaje autom√°tico, por favor no lo respondas directamente si no es para dudas sobre tu cita.</p>
        </div>
      </body>
    </html>
    """
    part1 = MIMEText(text, "plain")
    part2 = MIMEText(html, "html")
    message.attach(part1)
    message.attach(part2)
    context = ssl.create_default_context()
    try:
        with smtplib.SMTP_SSL(SMTP_SERVER, SMTP_PORT, context=context) as server:
            server.login(EMAIL_ADDRESS, EMAIL_PASSWORD)
            server.sendmail(EMAIL_ADDRESS, recipient_email, message.as_string())
            print(f"‚úÖ Correo enviado a {recipient_email}")
            return True
    except Exception as e:
        print(f"‚ùå Error al enviar correo: {e}")
        return False

# === PROCESAMIENTO DE MENSAJES ===
def process_user_message(phone_number, message_body):
    user_data = user_state.get(phone_number, {"stage": "start"})
    user_info = user_data_storage.get(phone_number, {})
    print(f"[MENSAJE ENTRANTE] {phone_number}: {message_body}")

    if user_data["stage"] == "start":
        send_whatsapp_message(phone_number, WELCOME_MESSAGE)
        user_data["stage"] = "option_selected"

    elif user_data["stage"] == "option_selected":
        if message_body == "1":
            user_data["tipo"] = "primera_vez"
            user_data["stage"] = "servicio_primera"
            send_whatsapp_message(phone_number, SERVICIOS_PRIMERA_VEZ)
        elif message_body == "2":
            user_data["tipo"] = "subsecuente"
            user_data["stage"] = "servicio_subsecuente"
            send_whatsapp_message(phone_number, SERVICIOS_SUBSECUENTE)
        elif message_body == "3":
            user_data["stage"] = "atencion_cliente"
            send_whatsapp_message(phone_number, {
                "type": "text",
                "text": {"body": "1Ô∏è‚É£ COSTOS\n2Ô∏è‚É£ Hablar con Am√©rica"}
            })
        elif message_body == "4":
            user_data["stage"] = "facturacion"
            send_whatsapp_message(phone_number, {
                "type": "text",
                "text": {"body": "1Ô∏è‚É£ Requiero factura\n2Ô∏è‚É£ Dudas"}
            })
        elif message_body == "5":
            send_whatsapp_message(phone_number, {
                "type": "text",
                "text": {"body": "Para el env√≠o de resultados, env√≠alos al correo:\nüìß gine.moni.og@gmail.com"}
            })
            send_whatsapp_message(phone_number, WELCOME_MESSAGE)
            user_data["stage"] = "option_selected"
        elif message_body == "6":
            send_whatsapp_message(phone_number, {
                "type": "text",
                "text": {"body": "¬øTienes alguna duda? Escr√≠benos brevemente tu consulta y en breve te conectaremos con un miembro del equipo."}
            })
            user_data["stage"] = "dudas"
        else:
            send_whatsapp_message(phone_number, {
                "type": "text",
                "text": {"body": "Por favor, selecciona una opci√≥n v√°lida del 1 al 6."}
            })

    # === PRIMERA VEZ ===
    elif user_data["stage"] == "servicio_primera":
        if message_body in ["1", "2", "3", "4"]:
            user_data["servicio"] = message_body
            user_data["stage"] = "especialista"
            send_whatsapp_message(phone_number, ESPECIALISTAS)
        elif message_body == "5":
            user_data["servicio"] = "5"
            user_data["stage"] = "otros_opciones"
            send_whatsapp_message(phone_number, OTROS_OPCIONES)
        else:
            send_whatsapp_message(phone_number, {
                "type": "text",
                "text": {"body": "Por favor, elige una opci√≥n v√°lida (1-5)."}
            })

    elif user_data["stage"] == "otros_opciones":
        if message_body == "3":
            send_whatsapp_message(phone_number, {
                "type": "text",
                "text": {"body": "Conectando con Am√©rica... Un miembro del equipo te contactar√° pronto."}
            })
            user_data["stage"] = "start"
            send_whatsapp_message(phone_number, WELCOME_MESSAGE)
        else:
            user_data["stage"] = "especialista"
            send_whatsapp_message(phone_number, ESPECIALISTAS)

    elif user_data["stage"] == "especialista":
        if message_body in ["1", "2", "3", "4", "5"]:
            user_data["especialista"] = message_body
            user_data["stage"] = "pedir_datos_sin_correo"
            send_whatsapp_message(phone_number, {
                "type": "text",
                "text": {"body": "Por favor, env√≠a:\nNombre completo\nTel√©fono\nFecha de nacimiento\nEdad"}
            })
        else:
            send_whatsapp_message(phone_number, {
                "type": "text",
                "text": {"body": "Por favor, elige una opci√≥n v√°lida (1-5)."}
            })

    elif user_data["stage"] == "pedir_datos_sin_correo":
        extracted_data = extract_user_data(message_body)
        user_info.update(extracted_data)
        user_data_storage[phone_number] = user_info
        user_data["stage"] = "esperando_correo"
        send_whatsapp_message(phone_number, {
            "type": "text",
            "text": {"body": "Gracias. Ahora, por favor, env√≠anos tu correo electr√≥nico para enviarte la confirmaci√≥n."}
        })

    elif user_data["stage"] == "esperando_correo":
        email_match = re.search(r'[\w\.-]+@[\w\.-]+\.\w+', message_body)
        if email_match:
            user_info["correo"] = email_match.group(0)
            user_data_storage[phone_number] = user_info
            user_data["stage"] = "mostrar_horarios"
            send_whatsapp_message(phone_number, HORARIOS_PRIMERA_VEZ)
            pago_info = {
                "type": "text",
                "text": {
                    "body": "Te compartimos una informaci√≥n importante: üìå Para consultas de primera vez, solicitamos un anticipo de $500 MXN. El monto restante se cubrir√° el d√≠a de tu consulta, una vez finalizada. Esta medida nos permite asegurar tu lugar, ya que contamos con alta demanda.\n\nFavor de enviar su comprobante de pago al correo: milkiin.gine@gmail.com\n\nDatos para pago:\nBanco: BBVA\nCuenta: 048 482 8712\nCLABE: 012180004848287122"
                }
            }
            send_whatsapp_message(phone_number, pago_info)
            send_whatsapp_message(phone_number, {
                "type": "text",
                "text": {"body": "Por favor, env√≠a la fecha y hora que prefieras (ej: 2025-04-05 10:00)"}
            })
            user_data["stage"] = "esperando_fecha"
        else:
            send_whatsapp_message(phone_number, {
                "type": "text",
                "text": {"body": "El formato del correo es incorrecto. Por favor, int√©ntalo de nuevo."}
            })

    # === SUBSECUENTE ===
    elif user_data["stage"] == "servicio_subsecuente":
        if message_body in ["1", "2", "3", "4", "5", "6"]:
            user_data["servicio"] = message_body
            user_data["stage"] = "datos_subsecuente"
            send_whatsapp_message(phone_number, {
                "type": "text",
                "text": {"body": "Por favor, env√≠a:\nNombre completo\nCorreo electr√≥nico\nTel√©fono\nFecha de nacimiento\nEdad"}
            })
        elif message_body == "7":
            user_data["servicio"] = "7"
            user_data["stage"] = "otros_opciones_sub"
            send_whatsapp_message(phone_number, OTROS_OPCIONES)
        else:
            send_whatsapp_message(phone_number, {
                "type": "text",
                "text": {"body": "Por favor, elige una opci√≥n v√°lida (1-7)."}
            })

    elif user_data["stage"] == "otros_opciones_sub":
        if message_body == "3":
            send_whatsapp_message(phone_number, {
                "type": "text",
                "text": {"body": "Conectando con Am√©rica... Un miembro del equipo te contactar√° pronto."}
            })
            user_data["stage"] = "start"
            send_whatsapp_message(phone_number, WELCOME_MESSAGE)
        else:
            user_data["stage"] = "datos_subsecuente"
            send_whatsapp_message(phone_number, {
                "type": "text",
                "text": {"body": "Por favor, env√≠a:\nNombre completo\nCorreo electr√≥nico\nTel√©fono\nFecha de nacimiento\nEdad"}
            })

    elif user_data["stage"] == "datos_subsecuente":
        extracted_data = extract_user_data(message_body)
        user_info.update(extracted_data)
        user_data_storage[phone_number] = user_info
        user_data["stage"] = "mostrar_horarios_sub"
        send_whatsapp_message(phone_number, HORARIOS_SUBSECUENTE)
        send_whatsapp_message(phone_number, {
            "type": "text",
            "text": {"body": "Por favor, responde con la fecha y hora que prefieras (ej: 2025-04-05 10:00)"}
        })
        user_data["stage"] = "esperando_fecha_sub"

    # === AGENDAR CITA (PRIMERA VEZ) ===
    elif user_data["stage"] == "esperando_fecha":
        try:
            fecha_hora_str = message_body.strip()
            fecha_hora = datetime.strptime(fecha_hora_str, "%Y-%m-%d %H:%M")
            servicio_key = user_data.get("servicio", "1")
            duracion = DURACIONES_PRIMERA_VEZ.get(servicio_key, 60)
            servicio_nombre = SERVICIOS_NOMBRES.get(servicio_key, "Consulta")
            especialista_key = user_data.get("especialista", "1")
            especialista_nombre = ESPECIALISTAS_NOMBRES.get(especialista_key, "No definido")
            nombre_paciente = user_info.get('nombre', 'Paciente An√≥nimo')

            crear_evento_google_calendar(
                resumen=f"Cita - {servicio_nombre} con {especialista_nombre}",
                inicio=fecha_hora,
                duracion_minutos=duracion,
                descripcion=f"Paciente: {nombre_paciente}\nTel√©fono: {phone_number}\nServicio: {servicio_nombre}\nEspecialista: {especialista_nombre}"
            )

            if user_info.get('correo'):
                send_appointment_email(
                    user_info['correo'],
                    nombre_paciente,
                    especialista_nombre,
                    fecha_hora.strftime("%Y-%m-%d"),
                    fecha_hora.strftime("%H:%M")
                )

            try:
                ics_path = generar_archivo_ics(
                    nombre_paciente=nombre_paciente,
                    servicio=servicio_nombre,
                    especialista=especialista_nombre,
                    fecha_hora=fecha_hora,
                    duracion_minutos=duracion
                )
                send_whatsapp_document(phone_number, ics_path)
                os.unlink(ics_path)
            except Exception as e:
                print(f"‚ö†Ô∏è No se pudo enviar .ics: {e}")

            send_whatsapp_message(phone_number, CONFIRMACION)
            cita_detalle = {
                "type": "text",
                "text": {
                    "body": f"üìÖ CONFIRMACI√ìN DE CITA\n\nServicio: {servicio_nombre}\nEspecialista: {especialista_nombre}\nFecha y hora: {fecha_hora_str}\nDuraci√≥n estimada: {duracion} minutos"
                }
            }
            send_whatsapp_message(phone_number, cita_detalle)
            
            # Reiniciar la conversaci√≥n
            send_whatsapp_message(phone_number, FINAL_MESSAGE)
            del user_state[phone_number]
            if phone_number in user_data_storage:
                del user_data_storage[phone_number]
        except ValueError:
            send_whatsapp_message(phone_number, {
                "type": "text",
                "text": {"body": "Por favor, env√≠a la fecha y hora en formato: AAAA-MM-DD HH:MM\nEj: 2025-04-05 10:00"}
            })

    # === AGENDAR CITA (SUBSECUENTE) ===
    elif user_data["stage"] == "esperando_fecha_sub":
        try:
            fecha_hora_str = message_body.strip()
            fecha_hora = datetime.strptime(fecha_hora_str, "%Y-%m-%d %H:%M")
            servicio_key = user_data.get("servicio", "1")
            duracion = DURACIONES_SUBSECUENTE.get(servicio_key, 45)
            servicio_nombre = SERVICIOS_SUB_NOMBRES.get(servicio_key, "Consulta")
            nombre_paciente = user_info.get('nombre', 'Paciente An√≥nimo')
            especialista_nombre = "Por definir"

            crear_evento_google_calendar(
                resumen=f"Cita - {servicio_nombre} (Subsecuente)",
                inicio=fecha_hora,
                duracion_minutos=duracion,
                descripcion=f"Paciente: {nombre_paciente}\nTel√©fono: {phone_number}\nServicio: {servicio_nombre}"
            )

            if user_info.get('correo'):
                send_appointment_email(
                    user_info['correo'],
                    nombre_paciente,
                    especialista_nombre,
                    fecha_hora.strftime("%Y-%m-%d"),
                    fecha_hora.strftime("%H:%M")
                )

            try:
                ics_path = generar_archivo_ics(
                    nombre_paciente=nombre_paciente,
                    servicio=servicio_nombre,
                    especialista=especialista_nombre,
                    fecha_hora=fecha_hora,
                    duracion_minutos=duracion
                )
                send_whatsapp_document(phone_number, ics_path)
                os.unlink(ics_path)
            except Exception as e:
                print(f"‚ö†Ô∏è No se pudo enviar .ics: {e}")

            send_whatsapp_message(phone_number, CONFIRMACION)
            cita_detalle = {
                "type": "text",
                "text": {
                    "body": f"üìÖ CONFIRMACI√ìN DE CITA\n\nServicio: {servicio_nombre}\nFecha y hora: {fecha_hora_str}\nDuraci√≥n estimada: {duracion} minutos"
                }
            }
            send_whatsapp_message(phone_number, cita_detalle)
            
            # Reiniciar la conversaci√≥n
            send_whatsapp_message(phone_number, FINAL_MESSAGE)
            del user_state[phone_number]
            if phone_number in user_data_storage:
                del user_data_storage[phone_number]
        except ValueError:
            send_whatsapp_message(phone_number, {
                "type": "text",
                "text": {"body": "Por favor, env√≠a la fecha y hora en formato: AAAA-MM-DD HH:MM\nEj: 2025-04-05 10:00"}
            })

    # === ATENCI√ìN AL CLIENTE ===
    elif user_data["stage"] == "atencion_cliente":
        if message_body == "1":
            send_whatsapp_message(phone_number, COSTOS)
        elif message_body == "2":
            send_whatsapp_message(phone_number, {
                "type": "text",
                "text": {"body": "Conectando con Am√©rica... Un miembro del equipo te contactar√° pronto."}
            })
        send_whatsapp_message(phone_number, WELCOME_MESSAGE)
        user_data["stage"] = "option_selected"

    # === FACTURACI√ìN ===
    elif user_data["stage"] == "facturacion":
        if message_body == "1":
            send_whatsapp_message(phone_number, {
                "type": "text",
                "text": {"body": "Por favor, completa el formulario:\nüîó [Formulario de facturaci√≥n](https://docs.google.com/forms/d/e/1FAIpQLSfr1WWXWQGx4sZj3_0FnIp6XWBb1mol4GfVGfymflsRI0E5pA/viewform)"}
            })
        elif message_body == "2":
            send_whatsapp_message(phone_number, {
                "type": "text",
                "text": {"body": "Para dudas de facturaci√≥n, escribe a:\nüìß lcastillo@gbcasesoria.mx"}
            })
        send_whatsapp_message(phone_number, WELCOME_MESSAGE)
        user_data["stage"] = "option_selected"

    # === DUDAS ===
    elif user_data["stage"] == "dudas":
        print(f"[DUDA] {phone_number}: {message_body}")
        send_whatsapp_message(phone_number, {
            "type": "text",
            "text": {"body": "Hemos recibido tu consulta. Un miembro del equipo te responder√° pronto."}
        })
        send_whatsapp_message(phone_number, WELCOME_MESSAGE)
        user_data["stage"] = "option_selected"

    else:
        send_whatsapp_message(phone_number, WELCOME_MESSAGE)
        user_data["stage"] = "option_selected"

    user_state[phone_number] = user_data

# === WEBHOOKS ===
@application.route('/webhook/', methods=['GET', 'POST'])
def webhook():
    if request.method == 'GET':
        mode = request.args.get('hub.mode')
        token = request.args.get('hub.verify_token')
        challenge = request.args.get('hub.challenge')
        if mode and token:
            if mode == 'subscribe' and token == META_VERIFY_TOKEN:
                return challenge
            else:
                return 'Verificaci√≥n fallida', 403
    elif request.method == 'POST':
        try:
            data = request.get_json()
            if data.get('entry'):
                for entry in data['entry']:
                    if entry.get('changes'):
                        for change in entry['changes']:
                            if change.get('value') and change['value'].get('messages'):
                                messages = change['value']['messages']
                                for message in messages:
                                    phone_number = message['from']
                                    message_body = message.get('text', {}).get('body', '')
                                    process_user_message(phone_number, message_body)
            return 'EVENT_RECEIVED', 200
        except Exception as e:
            print(f"‚ùå Error en webhook: {e}")
            return 'Error', 500

@application.route('/')
def home():
    return jsonify({
        "message": "ü§ñ Bot de WhatsApp para Milkiin usando Meta API est√° activo",
        "status": "‚úÖ Online",
        "version": "1.0.0"
    })

if __name__ == "__main__":
    application.run(debug=True)